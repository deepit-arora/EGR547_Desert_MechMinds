function varargout = gui_guide(varargin)
% GUI_GUIDE MATLAB code for gui_guide.fig
%      GUI_GUIDE, by itself, creates a new GUI_GUIDE or raises the existing
%      singleton*.
%
%      H = GUI_GUIDE returns the handle to a new GUI_GUIDE or the handle to
%      the existing singleton*.
%
%      GUI_GUIDE('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI_GUIDE.M with the given input arguments.
%
%      GUI_GUIDE('Property','Value',...) creates a new GUI_GUIDE or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before gui_guide_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to gui_guide_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help gui_guide

% Last Modified by GUIDE v2.5 18-Apr-2024 12:17:41

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @gui_guide_OpeningFcn, ...
    'gui_OutputFcn',  @gui_guide_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before gui_guide is made visible.
function gui_guide_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to gui_guide (see VARARGIN)

% Choose default command line output for gui_guide
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes gui_guide wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = gui_guide_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- If Enable == 'on', executes on mouse press in 5 pixel border.
% --- Otherwise, executes on mouse press in 5 pixel border or over text2.
function text2_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to text2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes during object creation, after setting all properties.
function dataTable_CreateFcn(hObject, eventdata, handles)
% hObject    handle to dataTable (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called


% --- Executes on button press in exportButton.
% Callback function for the button to export table data
function exportButton_Callback(hObject, eventdata, handles)


% Fetch the data from the table
dataTable = findobj('Tag', 'dataTable'); % find table by Tag
tableData = get(dataTable, 'Data'); % get data from table
assignin('base', 'exportedData', tableData);
% Optionally, display a message to the user
disp('Data has been exported to the base workspace under the variable name "exportedData".');

% VARS 

thetas = exportedData(:,1);
alphas = exportedData(:,1);
as = exportedData(:,1);
ds = exportedData(:,1);;
link_masses = exportedData(:,1);
% HELPER FUNCTION INTEGRATION

[T0H, T0H_sym] = f_kinematics(thetas, alphas, a, d)


%random eqn
syms x
a = rand; b = rand; c = rand;
symbExpr = a*x^2 + b*x + c;  % Example quadratic equation
latexStr = latex(symbExpr);

% eqn1
axes(handles.eqn1); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn1, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);


% eqn2
axes(handles.eqn2); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn2, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn3
axes(handles.eqn3); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn3, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn4
axes(handles.eqn4); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn4, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn5
axes(handles.eqn5); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn5, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn6
axes(handles.eqn6); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn6, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn7
axes(handles.eqn7); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn7, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn8
axes(handles.eqn8); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn8, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn9
axes(handles.eqn9); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn9, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn10
axes(handles.eqn10); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn10, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn11
axes(handles.eqn11); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn11, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

% eqn12
axes(handles.eqn12); % Ensure 'axesEquation' is your axes' tag
cla; % Clear axes
set(handles.eqn12, 'Visible','off')
text('Units', 'normalized', 'Position', [0.5 0.5], 'String', ['$' latexStr '$'], 'Interpreter', 'latex', 'HorizontalAlignment', 'center', 'FontSize', 12);

%plot 1
axesHandle1 = handles.axes1;% Access the axes handle
axes(axesHandle1);% Make the GUI's axes current
plot(axesHandle1, rand(10,1), rand(10,1)); % Plot something
xlabel(axesHandle1,"x axis")
ylabel(axesHandle1,"y axis")
title(axesHandle1," plot title")

%plot 2
axesHandle2 = handles.axes2;% Access the axes handle
axes(axesHandle2);% Make the GUI's axes current
plot(axesHandle2, rand(10,1), rand(10,1)); % Plot something
xlabel(axesHandle2,"x axis")
ylabel(axesHandle2,"y axis")
title(axesHandle2," plot title")

%plot 3
axesHandle3 = handles.axes3;% Access the axes handle
axes(axesHandle3);% Make the GUI's axes current
plot(axesHandle3, rand(10,1), rand(10,1)); % Plot something
xlabel(axesHandle3,"x axis")
ylabel(axesHandle3,"y axis")
title(axesHandle3," plot title")

%plot 4
axesHandle4 = handles.axes4;% Access the axes handle
axes(axesHandle4);% Make the GUI's axes current
plot(axesHandle4, rand(10,1), rand(10,1)); % Plot something
xlabel(axesHandle4,"x axis")
ylabel(axesHandle4,"y axis")
title(axesHandle4," plot title")

%plot 5
axesHandle5 = handles.axes5;% Access the axes handle
axes(axesHandle5);% Make the GUI's axes current
plot(axesHandle5, rand(10,1), rand(10,1)); % Plot something
xlabel(axesHandle5,"x axis")
ylabel(axesHandle5,"y axis")
title(axesHandle5," plot title")

%plot 6
axesHandle6 = handles.axes6;% Access the axes handle
axes(axesHandle6);% Make the GUI's axes current
plot(axesHandle6, rand(10,1), rand(10,1)); % Plot something
xlabel(axesHandle6,"x axis")
ylabel(axesHandle6,"y axis")
title(axesHandle6," plot title")

%plot 7
axesHandle7 = handles.axes7;% Access the axes handle
axes(axesHandle7);% Make the GUI's axes current
plot(axesHandle7, rand(10,1), rand(10,1)); % Plot something
xlabel(axesHandle7,"x axis")
ylabel(axesHandle7,"y axis")
title(axesHandle7," plot title")

%plot 8
axesHandle8 = handles.axes8;% Access the axes handle
axes(axesHandle8);% Make the GUI's axes current
plot(axesHandle8, rand(10,1), rand(10,1)); % Plot something
xlabel(axesHandle8,"x axis")
ylabel(axesHandle8,"y axis")
title(axesHandle8," plot title")
